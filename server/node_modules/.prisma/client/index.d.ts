
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Director
 * 
 */
export type Director = $Result.DefaultSelection<Prisma.$DirectorPayload>
/**
 * Model Shop
 * 
 */
export type Shop = $Result.DefaultSelection<Prisma.$ShopPayload>
/**
 * Model Furniture
 * 
 */
export type Furniture = $Result.DefaultSelection<Prisma.$FurniturePayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderOnShop
 * 
 */
export type OrderOnShop = $Result.DefaultSelection<Prisma.$OrderOnShopPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Directors
 * const directors = await prisma.director.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Directors
   * const directors = await prisma.director.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.director`: Exposes CRUD operations for the **Director** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Directors
    * const directors = await prisma.director.findMany()
    * ```
    */
  get director(): Prisma.DirectorDelegate<ExtArgs>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<ExtArgs>;

  /**
   * `prisma.furniture`: Exposes CRUD operations for the **Furniture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Furnitures
    * const furnitures = await prisma.furniture.findMany()
    * ```
    */
  get furniture(): Prisma.FurnitureDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.orderOnShop`: Exposes CRUD operations for the **OrderOnShop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderOnShops
    * const orderOnShops = await prisma.orderOnShop.findMany()
    * ```
    */
  get orderOnShop(): Prisma.OrderOnShopDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Director: 'Director',
    Shop: 'Shop',
    Furniture: 'Furniture',
    Order: 'Order',
    OrderOnShop: 'OrderOnShop'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "director" | "shop" | "furniture" | "order" | "orderOnShop"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Director: {
        payload: Prisma.$DirectorPayload<ExtArgs>
        fields: Prisma.DirectorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DirectorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DirectorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>
          }
          findFirst: {
            args: Prisma.DirectorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DirectorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>
          }
          findMany: {
            args: Prisma.DirectorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>[]
          }
          create: {
            args: Prisma.DirectorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>
          }
          createMany: {
            args: Prisma.DirectorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DirectorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>[]
          }
          delete: {
            args: Prisma.DirectorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>
          }
          update: {
            args: Prisma.DirectorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>
          }
          deleteMany: {
            args: Prisma.DirectorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DirectorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DirectorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DirectorPayload>
          }
          aggregate: {
            args: Prisma.DirectorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDirector>
          }
          groupBy: {
            args: Prisma.DirectorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DirectorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DirectorCountArgs<ExtArgs>
            result: $Utils.Optional<DirectorCountAggregateOutputType> | number
          }
        }
      }
      Shop: {
        payload: Prisma.$ShopPayload<ExtArgs>
        fields: Prisma.ShopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShopFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShopFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findFirst: {
            args: Prisma.ShopFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShopFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          findMany: {
            args: Prisma.ShopFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          create: {
            args: Prisma.ShopCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          createMany: {
            args: Prisma.ShopCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShopCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>[]
          }
          delete: {
            args: Prisma.ShopDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          update: {
            args: Prisma.ShopUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          deleteMany: {
            args: Prisma.ShopDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShopUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShopUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShopPayload>
          }
          aggregate: {
            args: Prisma.ShopAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShop>
          }
          groupBy: {
            args: Prisma.ShopGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShopGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShopCountArgs<ExtArgs>
            result: $Utils.Optional<ShopCountAggregateOutputType> | number
          }
        }
      }
      Furniture: {
        payload: Prisma.$FurniturePayload<ExtArgs>
        fields: Prisma.FurnitureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FurnitureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FurnitureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>
          }
          findFirst: {
            args: Prisma.FurnitureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FurnitureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>
          }
          findMany: {
            args: Prisma.FurnitureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>[]
          }
          create: {
            args: Prisma.FurnitureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>
          }
          createMany: {
            args: Prisma.FurnitureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FurnitureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>[]
          }
          delete: {
            args: Prisma.FurnitureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>
          }
          update: {
            args: Prisma.FurnitureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>
          }
          deleteMany: {
            args: Prisma.FurnitureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FurnitureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FurnitureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FurniturePayload>
          }
          aggregate: {
            args: Prisma.FurnitureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFurniture>
          }
          groupBy: {
            args: Prisma.FurnitureGroupByArgs<ExtArgs>
            result: $Utils.Optional<FurnitureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FurnitureCountArgs<ExtArgs>
            result: $Utils.Optional<FurnitureCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderOnShop: {
        payload: Prisma.$OrderOnShopPayload<ExtArgs>
        fields: Prisma.OrderOnShopFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderOnShopFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderOnShopFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>
          }
          findFirst: {
            args: Prisma.OrderOnShopFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderOnShopFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>
          }
          findMany: {
            args: Prisma.OrderOnShopFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>[]
          }
          create: {
            args: Prisma.OrderOnShopCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>
          }
          createMany: {
            args: Prisma.OrderOnShopCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderOnShopCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>[]
          }
          delete: {
            args: Prisma.OrderOnShopDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>
          }
          update: {
            args: Prisma.OrderOnShopUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>
          }
          deleteMany: {
            args: Prisma.OrderOnShopDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderOnShopUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderOnShopUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderOnShopPayload>
          }
          aggregate: {
            args: Prisma.OrderOnShopAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderOnShop>
          }
          groupBy: {
            args: Prisma.OrderOnShopGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderOnShopGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderOnShopCountArgs<ExtArgs>
            result: $Utils.Optional<OrderOnShopCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DirectorCountOutputType
   */

  export type DirectorCountOutputType = {
    shops: number
  }

  export type DirectorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shops?: boolean | DirectorCountOutputTypeCountShopsArgs
  }

  // Custom InputTypes
  /**
   * DirectorCountOutputType without action
   */
  export type DirectorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DirectorCountOutputType
     */
    select?: DirectorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DirectorCountOutputType without action
   */
  export type DirectorCountOutputTypeCountShopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopWhereInput
  }


  /**
   * Count Type ShopCountOutputType
   */

  export type ShopCountOutputType = {
    orderOnShops: number
  }

  export type ShopCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderOnShops?: boolean | ShopCountOutputTypeCountOrderOnShopsArgs
  }

  // Custom InputTypes
  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     */
    select?: ShopCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeCountOrderOnShopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderOnShopWhereInput
  }


  /**
   * Count Type FurnitureCountOutputType
   */

  export type FurnitureCountOutputType = {
    orders: number
  }

  export type FurnitureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | FurnitureCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * FurnitureCountOutputType without action
   */
  export type FurnitureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FurnitureCountOutputType
     */
    select?: FurnitureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FurnitureCountOutputType without action
   */
  export type FurnitureCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderOnShops: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderOnShops?: boolean | OrderCountOutputTypeCountOrderOnShopsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderOnShopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderOnShopWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Director
   */

  export type AggregateDirector = {
    _count: DirectorCountAggregateOutputType | null
    _avg: DirectorAvgAggregateOutputType | null
    _sum: DirectorSumAggregateOutputType | null
    _min: DirectorMinAggregateOutputType | null
    _max: DirectorMaxAggregateOutputType | null
  }

  export type DirectorAvgAggregateOutputType = {
    id: number | null
  }

  export type DirectorSumAggregateOutputType = {
    id: number | null
  }

  export type DirectorMinAggregateOutputType = {
    id: number | null
    lastname: string | null
    firstname: string | null
    patronymic: string | null
  }

  export type DirectorMaxAggregateOutputType = {
    id: number | null
    lastname: string | null
    firstname: string | null
    patronymic: string | null
  }

  export type DirectorCountAggregateOutputType = {
    id: number
    lastname: number
    firstname: number
    patronymic: number
    _all: number
  }


  export type DirectorAvgAggregateInputType = {
    id?: true
  }

  export type DirectorSumAggregateInputType = {
    id?: true
  }

  export type DirectorMinAggregateInputType = {
    id?: true
    lastname?: true
    firstname?: true
    patronymic?: true
  }

  export type DirectorMaxAggregateInputType = {
    id?: true
    lastname?: true
    firstname?: true
    patronymic?: true
  }

  export type DirectorCountAggregateInputType = {
    id?: true
    lastname?: true
    firstname?: true
    patronymic?: true
    _all?: true
  }

  export type DirectorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Director to aggregate.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: DirectorOrderByWithRelationInput | DirectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Directors
    **/
    _count?: true | DirectorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DirectorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DirectorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DirectorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DirectorMaxAggregateInputType
  }

  export type GetDirectorAggregateType<T extends DirectorAggregateArgs> = {
        [P in keyof T & keyof AggregateDirector]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirector[P]>
      : GetScalarType<T[P], AggregateDirector[P]>
  }




  export type DirectorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DirectorWhereInput
    orderBy?: DirectorOrderByWithAggregationInput | DirectorOrderByWithAggregationInput[]
    by: DirectorScalarFieldEnum[] | DirectorScalarFieldEnum
    having?: DirectorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DirectorCountAggregateInputType | true
    _avg?: DirectorAvgAggregateInputType
    _sum?: DirectorSumAggregateInputType
    _min?: DirectorMinAggregateInputType
    _max?: DirectorMaxAggregateInputType
  }

  export type DirectorGroupByOutputType = {
    id: number
    lastname: string
    firstname: string
    patronymic: string | null
    _count: DirectorCountAggregateOutputType | null
    _avg: DirectorAvgAggregateOutputType | null
    _sum: DirectorSumAggregateOutputType | null
    _min: DirectorMinAggregateOutputType | null
    _max: DirectorMaxAggregateOutputType | null
  }

  type GetDirectorGroupByPayload<T extends DirectorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DirectorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DirectorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DirectorGroupByOutputType[P]>
            : GetScalarType<T[P], DirectorGroupByOutputType[P]>
        }
      >
    >


  export type DirectorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastname?: boolean
    firstname?: boolean
    patronymic?: boolean
    shops?: boolean | Director$shopsArgs<ExtArgs>
    _count?: boolean | DirectorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["director"]>

  export type DirectorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastname?: boolean
    firstname?: boolean
    patronymic?: boolean
  }, ExtArgs["result"]["director"]>

  export type DirectorSelectScalar = {
    id?: boolean
    lastname?: boolean
    firstname?: boolean
    patronymic?: boolean
  }

  export type DirectorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shops?: boolean | Director$shopsArgs<ExtArgs>
    _count?: boolean | DirectorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DirectorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DirectorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Director"
    objects: {
      shops: Prisma.$ShopPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lastname: string
      firstname: string
      patronymic: string | null
    }, ExtArgs["result"]["director"]>
    composites: {}
  }

  type DirectorGetPayload<S extends boolean | null | undefined | DirectorDefaultArgs> = $Result.GetResult<Prisma.$DirectorPayload, S>

  type DirectorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DirectorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DirectorCountAggregateInputType | true
    }

  export interface DirectorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Director'], meta: { name: 'Director' } }
    /**
     * Find zero or one Director that matches the filter.
     * @param {DirectorFindUniqueArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DirectorFindUniqueArgs>(args: SelectSubset<T, DirectorFindUniqueArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Director that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DirectorFindUniqueOrThrowArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DirectorFindUniqueOrThrowArgs>(args: SelectSubset<T, DirectorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Director that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindFirstArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DirectorFindFirstArgs>(args?: SelectSubset<T, DirectorFindFirstArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Director that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindFirstOrThrowArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DirectorFindFirstOrThrowArgs>(args?: SelectSubset<T, DirectorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Directors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Directors
     * const directors = await prisma.director.findMany()
     * 
     * // Get first 10 Directors
     * const directors = await prisma.director.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directorWithIdOnly = await prisma.director.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DirectorFindManyArgs>(args?: SelectSubset<T, DirectorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Director.
     * @param {DirectorCreateArgs} args - Arguments to create a Director.
     * @example
     * // Create one Director
     * const Director = await prisma.director.create({
     *   data: {
     *     // ... data to create a Director
     *   }
     * })
     * 
     */
    create<T extends DirectorCreateArgs>(args: SelectSubset<T, DirectorCreateArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Directors.
     * @param {DirectorCreateManyArgs} args - Arguments to create many Directors.
     * @example
     * // Create many Directors
     * const director = await prisma.director.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DirectorCreateManyArgs>(args?: SelectSubset<T, DirectorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Directors and returns the data saved in the database.
     * @param {DirectorCreateManyAndReturnArgs} args - Arguments to create many Directors.
     * @example
     * // Create many Directors
     * const director = await prisma.director.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Directors and only return the `id`
     * const directorWithIdOnly = await prisma.director.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DirectorCreateManyAndReturnArgs>(args?: SelectSubset<T, DirectorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Director.
     * @param {DirectorDeleteArgs} args - Arguments to delete one Director.
     * @example
     * // Delete one Director
     * const Director = await prisma.director.delete({
     *   where: {
     *     // ... filter to delete one Director
     *   }
     * })
     * 
     */
    delete<T extends DirectorDeleteArgs>(args: SelectSubset<T, DirectorDeleteArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Director.
     * @param {DirectorUpdateArgs} args - Arguments to update one Director.
     * @example
     * // Update one Director
     * const director = await prisma.director.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DirectorUpdateArgs>(args: SelectSubset<T, DirectorUpdateArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Directors.
     * @param {DirectorDeleteManyArgs} args - Arguments to filter Directors to delete.
     * @example
     * // Delete a few Directors
     * const { count } = await prisma.director.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DirectorDeleteManyArgs>(args?: SelectSubset<T, DirectorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Directors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Directors
     * const director = await prisma.director.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DirectorUpdateManyArgs>(args: SelectSubset<T, DirectorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Director.
     * @param {DirectorUpsertArgs} args - Arguments to update or create a Director.
     * @example
     * // Update or create a Director
     * const director = await prisma.director.upsert({
     *   create: {
     *     // ... data to create a Director
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Director we want to update
     *   }
     * })
     */
    upsert<T extends DirectorUpsertArgs>(args: SelectSubset<T, DirectorUpsertArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Directors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorCountArgs} args - Arguments to filter Directors to count.
     * @example
     * // Count the number of Directors
     * const count = await prisma.director.count({
     *   where: {
     *     // ... the filter for the Directors we want to count
     *   }
     * })
    **/
    count<T extends DirectorCountArgs>(
      args?: Subset<T, DirectorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Director.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectorAggregateArgs>(args: Subset<T, DirectorAggregateArgs>): Prisma.PrismaPromise<GetDirectorAggregateType<T>>

    /**
     * Group by Director.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DirectorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DirectorGroupByArgs['orderBy'] }
        : { orderBy?: DirectorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DirectorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirectorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Director model
   */
  readonly fields: DirectorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Director.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DirectorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shops<T extends Director$shopsArgs<ExtArgs> = {}>(args?: Subset<T, Director$shopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Director model
   */ 
  interface DirectorFieldRefs {
    readonly id: FieldRef<"Director", 'Int'>
    readonly lastname: FieldRef<"Director", 'String'>
    readonly firstname: FieldRef<"Director", 'String'>
    readonly patronymic: FieldRef<"Director", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Director findUnique
   */
  export type DirectorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * Filter, which Director to fetch.
     */
    where: DirectorWhereUniqueInput
  }

  /**
   * Director findUniqueOrThrow
   */
  export type DirectorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * Filter, which Director to fetch.
     */
    where: DirectorWhereUniqueInput
  }

  /**
   * Director findFirst
   */
  export type DirectorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * Filter, which Director to fetch.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: DirectorOrderByWithRelationInput | DirectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Directors.
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Directors.
     */
    distinct?: DirectorScalarFieldEnum | DirectorScalarFieldEnum[]
  }

  /**
   * Director findFirstOrThrow
   */
  export type DirectorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * Filter, which Director to fetch.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: DirectorOrderByWithRelationInput | DirectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Directors.
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Directors.
     */
    distinct?: DirectorScalarFieldEnum | DirectorScalarFieldEnum[]
  }

  /**
   * Director findMany
   */
  export type DirectorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * Filter, which Directors to fetch.
     */
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
     */
    orderBy?: DirectorOrderByWithRelationInput | DirectorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Directors.
     */
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
     */
    skip?: number
    distinct?: DirectorScalarFieldEnum | DirectorScalarFieldEnum[]
  }

  /**
   * Director create
   */
  export type DirectorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * The data needed to create a Director.
     */
    data: XOR<DirectorCreateInput, DirectorUncheckedCreateInput>
  }

  /**
   * Director createMany
   */
  export type DirectorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Directors.
     */
    data: DirectorCreateManyInput | DirectorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Director createManyAndReturn
   */
  export type DirectorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Directors.
     */
    data: DirectorCreateManyInput | DirectorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Director update
   */
  export type DirectorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * The data needed to update a Director.
     */
    data: XOR<DirectorUpdateInput, DirectorUncheckedUpdateInput>
    /**
     * Choose, which Director to update.
     */
    where: DirectorWhereUniqueInput
  }

  /**
   * Director updateMany
   */
  export type DirectorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Directors.
     */
    data: XOR<DirectorUpdateManyMutationInput, DirectorUncheckedUpdateManyInput>
    /**
     * Filter which Directors to update
     */
    where?: DirectorWhereInput
  }

  /**
   * Director upsert
   */
  export type DirectorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * The filter to search for the Director to update in case it exists.
     */
    where: DirectorWhereUniqueInput
    /**
     * In case the Director found by the `where` argument doesn't exist, create a new Director with this data.
     */
    create: XOR<DirectorCreateInput, DirectorUncheckedCreateInput>
    /**
     * In case the Director was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DirectorUpdateInput, DirectorUncheckedUpdateInput>
  }

  /**
   * Director delete
   */
  export type DirectorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
    /**
     * Filter which Director to delete.
     */
    where: DirectorWhereUniqueInput
  }

  /**
   * Director deleteMany
   */
  export type DirectorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Directors to delete
     */
    where?: DirectorWhereInput
  }

  /**
   * Director.shops
   */
  export type Director$shopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    where?: ShopWhereInput
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    cursor?: ShopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Director without action
   */
  export type DirectorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Director
     */
    select?: DirectorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DirectorInclude<ExtArgs> | null
  }


  /**
   * Model Shop
   */

  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    id: number | null
    director_id: number | null
  }

  export type ShopSumAggregateOutputType = {
    id: number | null
    director_id: number | null
  }

  export type ShopMinAggregateOutputType = {
    id: number | null
    number: string | null
    director_id: number | null
  }

  export type ShopMaxAggregateOutputType = {
    id: number | null
    number: string | null
    director_id: number | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    number: number
    director_id: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    id?: true
    director_id?: true
  }

  export type ShopSumAggregateInputType = {
    id?: true
    director_id?: true
  }

  export type ShopMinAggregateInputType = {
    id?: true
    number?: true
    director_id?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    number?: true
    director_id?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    number?: true
    director_id?: true
    _all?: true
  }

  export type ShopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shop to aggregate.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShopWhereInput
    orderBy?: ShopOrderByWithAggregationInput | ShopOrderByWithAggregationInput[]
    by: ShopScalarFieldEnum[] | ShopScalarFieldEnum
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }

  export type ShopGroupByOutputType = {
    id: number
    number: string
    director_id: number
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    director_id?: boolean
    director?: boolean | DirectorDefaultArgs<ExtArgs>
    orderOnShops?: boolean | Shop$orderOnShopsArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    director_id?: boolean
    director?: boolean | DirectorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop"]>

  export type ShopSelectScalar = {
    id?: boolean
    number?: boolean
    director_id?: boolean
  }

  export type ShopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    director?: boolean | DirectorDefaultArgs<ExtArgs>
    orderOnShops?: boolean | Shop$orderOnShopsArgs<ExtArgs>
    _count?: boolean | ShopCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShopIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    director?: boolean | DirectorDefaultArgs<ExtArgs>
  }

  export type $ShopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shop"
    objects: {
      director: Prisma.$DirectorPayload<ExtArgs>
      orderOnShops: Prisma.$OrderOnShopPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      director_id: number
    }, ExtArgs["result"]["shop"]>
    composites: {}
  }

  type ShopGetPayload<S extends boolean | null | undefined | ShopDefaultArgs> = $Result.GetResult<Prisma.$ShopPayload, S>

  type ShopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShopCountAggregateInputType | true
    }

  export interface ShopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shop'], meta: { name: 'Shop' } }
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShopFindUniqueArgs>(args: SelectSubset<T, ShopFindUniqueArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shop that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShopFindUniqueOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShopFindUniqueOrThrowArgs>(args: SelectSubset<T, ShopFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShopFindFirstArgs>(args?: SelectSubset<T, ShopFindFirstArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShopFindFirstOrThrowArgs>(args?: SelectSubset<T, ShopFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShopFindManyArgs>(args?: SelectSubset<T, ShopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
     */
    create<T extends ShopCreateArgs>(args: SelectSubset<T, ShopCreateArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shops.
     * @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     * @example
     * // Create many Shops
     * const shop = await prisma.shop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShopCreateManyArgs>(args?: SelectSubset<T, ShopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shops and returns the data saved in the database.
     * @param {ShopCreateManyAndReturnArgs} args - Arguments to create many Shops.
     * @example
     * // Create many Shops
     * const shop = await prisma.shop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shops and only return the `id`
     * const shopWithIdOnly = await prisma.shop.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShopCreateManyAndReturnArgs>(args?: SelectSubset<T, ShopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
     */
    delete<T extends ShopDeleteArgs>(args: SelectSubset<T, ShopDeleteArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShopUpdateArgs>(args: SelectSubset<T, ShopUpdateArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShopDeleteManyArgs>(args?: SelectSubset<T, ShopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShopUpdateManyArgs>(args: SelectSubset<T, ShopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
     */
    upsert<T extends ShopUpsertArgs>(args: SelectSubset<T, ShopUpsertArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): Prisma.PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shop model
   */
  readonly fields: ShopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    director<T extends DirectorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DirectorDefaultArgs<ExtArgs>>): Prisma__DirectorClient<$Result.GetResult<Prisma.$DirectorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orderOnShops<T extends Shop$orderOnShopsArgs<ExtArgs> = {}>(args?: Subset<T, Shop$orderOnShopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shop model
   */ 
  interface ShopFieldRefs {
    readonly id: FieldRef<"Shop", 'Int'>
    readonly number: FieldRef<"Shop", 'String'>
    readonly director_id: FieldRef<"Shop", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop findUniqueOrThrow
   */
  export type ShopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop findFirstOrThrow
   */
  export type ShopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shop to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     */
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop findMany
   */
  export type ShopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter, which Shops to fetch.
     */
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     */
    orderBy?: ShopOrderByWithRelationInput | ShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     */
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     */
    skip?: number
    distinct?: ShopScalarFieldEnum | ShopScalarFieldEnum[]
  }

  /**
   * Shop create
   */
  export type ShopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to create a Shop.
     */
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }

  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shop createManyAndReturn
   */
  export type ShopCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Shops.
     */
    data: ShopCreateManyInput | ShopCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shop update
   */
  export type ShopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The data needed to update a Shop.
     */
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shops.
     */
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     */
    where?: ShopWhereInput
  }

  /**
   * Shop upsert
   */
  export type ShopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * The filter to search for the Shop to update in case it exists.
     */
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     */
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }

  /**
   * Shop delete
   */
  export type ShopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
    /**
     * Filter which Shop to delete.
     */
    where: ShopWhereUniqueInput
  }

  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shops to delete
     */
    where?: ShopWhereInput
  }

  /**
   * Shop.orderOnShops
   */
  export type Shop$orderOnShopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    where?: OrderOnShopWhereInput
    orderBy?: OrderOnShopOrderByWithRelationInput | OrderOnShopOrderByWithRelationInput[]
    cursor?: OrderOnShopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderOnShopScalarFieldEnum | OrderOnShopScalarFieldEnum[]
  }

  /**
   * Shop without action
   */
  export type ShopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shop
     */
    select?: ShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShopInclude<ExtArgs> | null
  }


  /**
   * Model Furniture
   */

  export type AggregateFurniture = {
    _count: FurnitureCountAggregateOutputType | null
    _avg: FurnitureAvgAggregateOutputType | null
    _sum: FurnitureSumAggregateOutputType | null
    _min: FurnitureMinAggregateOutputType | null
    _max: FurnitureMaxAggregateOutputType | null
  }

  export type FurnitureAvgAggregateOutputType = {
    id: number | null
  }

  export type FurnitureSumAggregateOutputType = {
    id: number | null
  }

  export type FurnitureMinAggregateOutputType = {
    id: number | null
    name: string | null
    file: string | null
  }

  export type FurnitureMaxAggregateOutputType = {
    id: number | null
    name: string | null
    file: string | null
  }

  export type FurnitureCountAggregateOutputType = {
    id: number
    name: number
    file: number
    _all: number
  }


  export type FurnitureAvgAggregateInputType = {
    id?: true
  }

  export type FurnitureSumAggregateInputType = {
    id?: true
  }

  export type FurnitureMinAggregateInputType = {
    id?: true
    name?: true
    file?: true
  }

  export type FurnitureMaxAggregateInputType = {
    id?: true
    name?: true
    file?: true
  }

  export type FurnitureCountAggregateInputType = {
    id?: true
    name?: true
    file?: true
    _all?: true
  }

  export type FurnitureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Furniture to aggregate.
     */
    where?: FurnitureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Furnitures to fetch.
     */
    orderBy?: FurnitureOrderByWithRelationInput | FurnitureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FurnitureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Furnitures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Furnitures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Furnitures
    **/
    _count?: true | FurnitureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FurnitureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FurnitureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FurnitureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FurnitureMaxAggregateInputType
  }

  export type GetFurnitureAggregateType<T extends FurnitureAggregateArgs> = {
        [P in keyof T & keyof AggregateFurniture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFurniture[P]>
      : GetScalarType<T[P], AggregateFurniture[P]>
  }




  export type FurnitureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FurnitureWhereInput
    orderBy?: FurnitureOrderByWithAggregationInput | FurnitureOrderByWithAggregationInput[]
    by: FurnitureScalarFieldEnum[] | FurnitureScalarFieldEnum
    having?: FurnitureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FurnitureCountAggregateInputType | true
    _avg?: FurnitureAvgAggregateInputType
    _sum?: FurnitureSumAggregateInputType
    _min?: FurnitureMinAggregateInputType
    _max?: FurnitureMaxAggregateInputType
  }

  export type FurnitureGroupByOutputType = {
    id: number
    name: string
    file: string
    _count: FurnitureCountAggregateOutputType | null
    _avg: FurnitureAvgAggregateOutputType | null
    _sum: FurnitureSumAggregateOutputType | null
    _min: FurnitureMinAggregateOutputType | null
    _max: FurnitureMaxAggregateOutputType | null
  }

  type GetFurnitureGroupByPayload<T extends FurnitureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FurnitureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FurnitureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FurnitureGroupByOutputType[P]>
            : GetScalarType<T[P], FurnitureGroupByOutputType[P]>
        }
      >
    >


  export type FurnitureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    file?: boolean
    orders?: boolean | Furniture$ordersArgs<ExtArgs>
    _count?: boolean | FurnitureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["furniture"]>

  export type FurnitureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    file?: boolean
  }, ExtArgs["result"]["furniture"]>

  export type FurnitureSelectScalar = {
    id?: boolean
    name?: boolean
    file?: boolean
  }

  export type FurnitureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Furniture$ordersArgs<ExtArgs>
    _count?: boolean | FurnitureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FurnitureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FurniturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Furniture"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      file: string
    }, ExtArgs["result"]["furniture"]>
    composites: {}
  }

  type FurnitureGetPayload<S extends boolean | null | undefined | FurnitureDefaultArgs> = $Result.GetResult<Prisma.$FurniturePayload, S>

  type FurnitureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FurnitureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FurnitureCountAggregateInputType | true
    }

  export interface FurnitureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Furniture'], meta: { name: 'Furniture' } }
    /**
     * Find zero or one Furniture that matches the filter.
     * @param {FurnitureFindUniqueArgs} args - Arguments to find a Furniture
     * @example
     * // Get one Furniture
     * const furniture = await prisma.furniture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FurnitureFindUniqueArgs>(args: SelectSubset<T, FurnitureFindUniqueArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Furniture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FurnitureFindUniqueOrThrowArgs} args - Arguments to find a Furniture
     * @example
     * // Get one Furniture
     * const furniture = await prisma.furniture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FurnitureFindUniqueOrThrowArgs>(args: SelectSubset<T, FurnitureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Furniture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureFindFirstArgs} args - Arguments to find a Furniture
     * @example
     * // Get one Furniture
     * const furniture = await prisma.furniture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FurnitureFindFirstArgs>(args?: SelectSubset<T, FurnitureFindFirstArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Furniture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureFindFirstOrThrowArgs} args - Arguments to find a Furniture
     * @example
     * // Get one Furniture
     * const furniture = await prisma.furniture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FurnitureFindFirstOrThrowArgs>(args?: SelectSubset<T, FurnitureFindFirstOrThrowArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Furnitures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Furnitures
     * const furnitures = await prisma.furniture.findMany()
     * 
     * // Get first 10 Furnitures
     * const furnitures = await prisma.furniture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const furnitureWithIdOnly = await prisma.furniture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FurnitureFindManyArgs>(args?: SelectSubset<T, FurnitureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Furniture.
     * @param {FurnitureCreateArgs} args - Arguments to create a Furniture.
     * @example
     * // Create one Furniture
     * const Furniture = await prisma.furniture.create({
     *   data: {
     *     // ... data to create a Furniture
     *   }
     * })
     * 
     */
    create<T extends FurnitureCreateArgs>(args: SelectSubset<T, FurnitureCreateArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Furnitures.
     * @param {FurnitureCreateManyArgs} args - Arguments to create many Furnitures.
     * @example
     * // Create many Furnitures
     * const furniture = await prisma.furniture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FurnitureCreateManyArgs>(args?: SelectSubset<T, FurnitureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Furnitures and returns the data saved in the database.
     * @param {FurnitureCreateManyAndReturnArgs} args - Arguments to create many Furnitures.
     * @example
     * // Create many Furnitures
     * const furniture = await prisma.furniture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Furnitures and only return the `id`
     * const furnitureWithIdOnly = await prisma.furniture.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FurnitureCreateManyAndReturnArgs>(args?: SelectSubset<T, FurnitureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Furniture.
     * @param {FurnitureDeleteArgs} args - Arguments to delete one Furniture.
     * @example
     * // Delete one Furniture
     * const Furniture = await prisma.furniture.delete({
     *   where: {
     *     // ... filter to delete one Furniture
     *   }
     * })
     * 
     */
    delete<T extends FurnitureDeleteArgs>(args: SelectSubset<T, FurnitureDeleteArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Furniture.
     * @param {FurnitureUpdateArgs} args - Arguments to update one Furniture.
     * @example
     * // Update one Furniture
     * const furniture = await prisma.furniture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FurnitureUpdateArgs>(args: SelectSubset<T, FurnitureUpdateArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Furnitures.
     * @param {FurnitureDeleteManyArgs} args - Arguments to filter Furnitures to delete.
     * @example
     * // Delete a few Furnitures
     * const { count } = await prisma.furniture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FurnitureDeleteManyArgs>(args?: SelectSubset<T, FurnitureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Furnitures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Furnitures
     * const furniture = await prisma.furniture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FurnitureUpdateManyArgs>(args: SelectSubset<T, FurnitureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Furniture.
     * @param {FurnitureUpsertArgs} args - Arguments to update or create a Furniture.
     * @example
     * // Update or create a Furniture
     * const furniture = await prisma.furniture.upsert({
     *   create: {
     *     // ... data to create a Furniture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Furniture we want to update
     *   }
     * })
     */
    upsert<T extends FurnitureUpsertArgs>(args: SelectSubset<T, FurnitureUpsertArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Furnitures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureCountArgs} args - Arguments to filter Furnitures to count.
     * @example
     * // Count the number of Furnitures
     * const count = await prisma.furniture.count({
     *   where: {
     *     // ... the filter for the Furnitures we want to count
     *   }
     * })
    **/
    count<T extends FurnitureCountArgs>(
      args?: Subset<T, FurnitureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FurnitureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Furniture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FurnitureAggregateArgs>(args: Subset<T, FurnitureAggregateArgs>): Prisma.PrismaPromise<GetFurnitureAggregateType<T>>

    /**
     * Group by Furniture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FurnitureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FurnitureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FurnitureGroupByArgs['orderBy'] }
        : { orderBy?: FurnitureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FurnitureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFurnitureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Furniture model
   */
  readonly fields: FurnitureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Furniture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FurnitureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends Furniture$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Furniture$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Furniture model
   */ 
  interface FurnitureFieldRefs {
    readonly id: FieldRef<"Furniture", 'Int'>
    readonly name: FieldRef<"Furniture", 'String'>
    readonly file: FieldRef<"Furniture", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Furniture findUnique
   */
  export type FurnitureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * Filter, which Furniture to fetch.
     */
    where: FurnitureWhereUniqueInput
  }

  /**
   * Furniture findUniqueOrThrow
   */
  export type FurnitureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * Filter, which Furniture to fetch.
     */
    where: FurnitureWhereUniqueInput
  }

  /**
   * Furniture findFirst
   */
  export type FurnitureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * Filter, which Furniture to fetch.
     */
    where?: FurnitureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Furnitures to fetch.
     */
    orderBy?: FurnitureOrderByWithRelationInput | FurnitureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Furnitures.
     */
    cursor?: FurnitureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Furnitures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Furnitures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Furnitures.
     */
    distinct?: FurnitureScalarFieldEnum | FurnitureScalarFieldEnum[]
  }

  /**
   * Furniture findFirstOrThrow
   */
  export type FurnitureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * Filter, which Furniture to fetch.
     */
    where?: FurnitureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Furnitures to fetch.
     */
    orderBy?: FurnitureOrderByWithRelationInput | FurnitureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Furnitures.
     */
    cursor?: FurnitureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Furnitures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Furnitures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Furnitures.
     */
    distinct?: FurnitureScalarFieldEnum | FurnitureScalarFieldEnum[]
  }

  /**
   * Furniture findMany
   */
  export type FurnitureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * Filter, which Furnitures to fetch.
     */
    where?: FurnitureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Furnitures to fetch.
     */
    orderBy?: FurnitureOrderByWithRelationInput | FurnitureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Furnitures.
     */
    cursor?: FurnitureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Furnitures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Furnitures.
     */
    skip?: number
    distinct?: FurnitureScalarFieldEnum | FurnitureScalarFieldEnum[]
  }

  /**
   * Furniture create
   */
  export type FurnitureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * The data needed to create a Furniture.
     */
    data: XOR<FurnitureCreateInput, FurnitureUncheckedCreateInput>
  }

  /**
   * Furniture createMany
   */
  export type FurnitureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Furnitures.
     */
    data: FurnitureCreateManyInput | FurnitureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Furniture createManyAndReturn
   */
  export type FurnitureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Furnitures.
     */
    data: FurnitureCreateManyInput | FurnitureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Furniture update
   */
  export type FurnitureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * The data needed to update a Furniture.
     */
    data: XOR<FurnitureUpdateInput, FurnitureUncheckedUpdateInput>
    /**
     * Choose, which Furniture to update.
     */
    where: FurnitureWhereUniqueInput
  }

  /**
   * Furniture updateMany
   */
  export type FurnitureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Furnitures.
     */
    data: XOR<FurnitureUpdateManyMutationInput, FurnitureUncheckedUpdateManyInput>
    /**
     * Filter which Furnitures to update
     */
    where?: FurnitureWhereInput
  }

  /**
   * Furniture upsert
   */
  export type FurnitureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * The filter to search for the Furniture to update in case it exists.
     */
    where: FurnitureWhereUniqueInput
    /**
     * In case the Furniture found by the `where` argument doesn't exist, create a new Furniture with this data.
     */
    create: XOR<FurnitureCreateInput, FurnitureUncheckedCreateInput>
    /**
     * In case the Furniture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FurnitureUpdateInput, FurnitureUncheckedUpdateInput>
  }

  /**
   * Furniture delete
   */
  export type FurnitureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
    /**
     * Filter which Furniture to delete.
     */
    where: FurnitureWhereUniqueInput
  }

  /**
   * Furniture deleteMany
   */
  export type FurnitureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Furnitures to delete
     */
    where?: FurnitureWhereInput
  }

  /**
   * Furniture.orders
   */
  export type Furniture$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Furniture without action
   */
  export type FurnitureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Furniture
     */
    select?: FurnitureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FurnitureInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    furniture_id: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    furniture_id: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    furniture_id: number | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    furniture_id: number | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    furniture_id: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    furniture_id?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    furniture_id?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    furniture_id?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    furniture_id?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    furniture_id?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    furniture_id: number
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    furniture_id?: boolean
    furniture?: boolean | FurnitureDefaultArgs<ExtArgs>
    orderOnShops?: boolean | Order$orderOnShopsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    furniture_id?: boolean
    furniture?: boolean | FurnitureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    furniture_id?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    furniture?: boolean | FurnitureDefaultArgs<ExtArgs>
    orderOnShops?: boolean | Order$orderOnShopsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    furniture?: boolean | FurnitureDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      furniture: Prisma.$FurniturePayload<ExtArgs>
      orderOnShops: Prisma.$OrderOnShopPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      furniture_id: number
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    furniture<T extends FurnitureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FurnitureDefaultArgs<ExtArgs>>): Prisma__FurnitureClient<$Result.GetResult<Prisma.$FurniturePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orderOnShops<T extends Order$orderOnShopsArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderOnShopsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly furniture_id: FieldRef<"Order", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.orderOnShops
   */
  export type Order$orderOnShopsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    where?: OrderOnShopWhereInput
    orderBy?: OrderOnShopOrderByWithRelationInput | OrderOnShopOrderByWithRelationInput[]
    cursor?: OrderOnShopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderOnShopScalarFieldEnum | OrderOnShopScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderOnShop
   */

  export type AggregateOrderOnShop = {
    _count: OrderOnShopCountAggregateOutputType | null
    _avg: OrderOnShopAvgAggregateOutputType | null
    _sum: OrderOnShopSumAggregateOutputType | null
    _min: OrderOnShopMinAggregateOutputType | null
    _max: OrderOnShopMaxAggregateOutputType | null
  }

  export type OrderOnShopAvgAggregateOutputType = {
    order_id: number | null
    shop_id: number | null
  }

  export type OrderOnShopSumAggregateOutputType = {
    order_id: number | null
    shop_id: number | null
  }

  export type OrderOnShopMinAggregateOutputType = {
    order_id: number | null
    shop_id: number | null
  }

  export type OrderOnShopMaxAggregateOutputType = {
    order_id: number | null
    shop_id: number | null
  }

  export type OrderOnShopCountAggregateOutputType = {
    order_id: number
    shop_id: number
    _all: number
  }


  export type OrderOnShopAvgAggregateInputType = {
    order_id?: true
    shop_id?: true
  }

  export type OrderOnShopSumAggregateInputType = {
    order_id?: true
    shop_id?: true
  }

  export type OrderOnShopMinAggregateInputType = {
    order_id?: true
    shop_id?: true
  }

  export type OrderOnShopMaxAggregateInputType = {
    order_id?: true
    shop_id?: true
  }

  export type OrderOnShopCountAggregateInputType = {
    order_id?: true
    shop_id?: true
    _all?: true
  }

  export type OrderOnShopAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderOnShop to aggregate.
     */
    where?: OrderOnShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderOnShops to fetch.
     */
    orderBy?: OrderOnShopOrderByWithRelationInput | OrderOnShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderOnShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderOnShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderOnShops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderOnShops
    **/
    _count?: true | OrderOnShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderOnShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderOnShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderOnShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderOnShopMaxAggregateInputType
  }

  export type GetOrderOnShopAggregateType<T extends OrderOnShopAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderOnShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderOnShop[P]>
      : GetScalarType<T[P], AggregateOrderOnShop[P]>
  }




  export type OrderOnShopGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderOnShopWhereInput
    orderBy?: OrderOnShopOrderByWithAggregationInput | OrderOnShopOrderByWithAggregationInput[]
    by: OrderOnShopScalarFieldEnum[] | OrderOnShopScalarFieldEnum
    having?: OrderOnShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderOnShopCountAggregateInputType | true
    _avg?: OrderOnShopAvgAggregateInputType
    _sum?: OrderOnShopSumAggregateInputType
    _min?: OrderOnShopMinAggregateInputType
    _max?: OrderOnShopMaxAggregateInputType
  }

  export type OrderOnShopGroupByOutputType = {
    order_id: number
    shop_id: number
    _count: OrderOnShopCountAggregateOutputType | null
    _avg: OrderOnShopAvgAggregateOutputType | null
    _sum: OrderOnShopSumAggregateOutputType | null
    _min: OrderOnShopMinAggregateOutputType | null
    _max: OrderOnShopMaxAggregateOutputType | null
  }

  type GetOrderOnShopGroupByPayload<T extends OrderOnShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderOnShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderOnShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderOnShopGroupByOutputType[P]>
            : GetScalarType<T[P], OrderOnShopGroupByOutputType[P]>
        }
      >
    >


  export type OrderOnShopSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    shop_id?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderOnShop"]>

  export type OrderOnShopSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    shop_id?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderOnShop"]>

  export type OrderOnShopSelectScalar = {
    order_id?: boolean
    shop_id?: boolean
  }

  export type OrderOnShopInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }
  export type OrderOnShopIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    shop?: boolean | ShopDefaultArgs<ExtArgs>
  }

  export type $OrderOnShopPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderOnShop"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      shop: Prisma.$ShopPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      order_id: number
      shop_id: number
    }, ExtArgs["result"]["orderOnShop"]>
    composites: {}
  }

  type OrderOnShopGetPayload<S extends boolean | null | undefined | OrderOnShopDefaultArgs> = $Result.GetResult<Prisma.$OrderOnShopPayload, S>

  type OrderOnShopCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderOnShopFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderOnShopCountAggregateInputType | true
    }

  export interface OrderOnShopDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderOnShop'], meta: { name: 'OrderOnShop' } }
    /**
     * Find zero or one OrderOnShop that matches the filter.
     * @param {OrderOnShopFindUniqueArgs} args - Arguments to find a OrderOnShop
     * @example
     * // Get one OrderOnShop
     * const orderOnShop = await prisma.orderOnShop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderOnShopFindUniqueArgs>(args: SelectSubset<T, OrderOnShopFindUniqueArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrderOnShop that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderOnShopFindUniqueOrThrowArgs} args - Arguments to find a OrderOnShop
     * @example
     * // Get one OrderOnShop
     * const orderOnShop = await prisma.orderOnShop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderOnShopFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderOnShopFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrderOnShop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopFindFirstArgs} args - Arguments to find a OrderOnShop
     * @example
     * // Get one OrderOnShop
     * const orderOnShop = await prisma.orderOnShop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderOnShopFindFirstArgs>(args?: SelectSubset<T, OrderOnShopFindFirstArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrderOnShop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopFindFirstOrThrowArgs} args - Arguments to find a OrderOnShop
     * @example
     * // Get one OrderOnShop
     * const orderOnShop = await prisma.orderOnShop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderOnShopFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderOnShopFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrderOnShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderOnShops
     * const orderOnShops = await prisma.orderOnShop.findMany()
     * 
     * // Get first 10 OrderOnShops
     * const orderOnShops = await prisma.orderOnShop.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const orderOnShopWithOrder_idOnly = await prisma.orderOnShop.findMany({ select: { order_id: true } })
     * 
     */
    findMany<T extends OrderOnShopFindManyArgs>(args?: SelectSubset<T, OrderOnShopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrderOnShop.
     * @param {OrderOnShopCreateArgs} args - Arguments to create a OrderOnShop.
     * @example
     * // Create one OrderOnShop
     * const OrderOnShop = await prisma.orderOnShop.create({
     *   data: {
     *     // ... data to create a OrderOnShop
     *   }
     * })
     * 
     */
    create<T extends OrderOnShopCreateArgs>(args: SelectSubset<T, OrderOnShopCreateArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrderOnShops.
     * @param {OrderOnShopCreateManyArgs} args - Arguments to create many OrderOnShops.
     * @example
     * // Create many OrderOnShops
     * const orderOnShop = await prisma.orderOnShop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderOnShopCreateManyArgs>(args?: SelectSubset<T, OrderOnShopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderOnShops and returns the data saved in the database.
     * @param {OrderOnShopCreateManyAndReturnArgs} args - Arguments to create many OrderOnShops.
     * @example
     * // Create many OrderOnShops
     * const orderOnShop = await prisma.orderOnShop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderOnShops and only return the `order_id`
     * const orderOnShopWithOrder_idOnly = await prisma.orderOnShop.createManyAndReturn({ 
     *   select: { order_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderOnShopCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderOnShopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OrderOnShop.
     * @param {OrderOnShopDeleteArgs} args - Arguments to delete one OrderOnShop.
     * @example
     * // Delete one OrderOnShop
     * const OrderOnShop = await prisma.orderOnShop.delete({
     *   where: {
     *     // ... filter to delete one OrderOnShop
     *   }
     * })
     * 
     */
    delete<T extends OrderOnShopDeleteArgs>(args: SelectSubset<T, OrderOnShopDeleteArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrderOnShop.
     * @param {OrderOnShopUpdateArgs} args - Arguments to update one OrderOnShop.
     * @example
     * // Update one OrderOnShop
     * const orderOnShop = await prisma.orderOnShop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderOnShopUpdateArgs>(args: SelectSubset<T, OrderOnShopUpdateArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrderOnShops.
     * @param {OrderOnShopDeleteManyArgs} args - Arguments to filter OrderOnShops to delete.
     * @example
     * // Delete a few OrderOnShops
     * const { count } = await prisma.orderOnShop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderOnShopDeleteManyArgs>(args?: SelectSubset<T, OrderOnShopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderOnShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderOnShops
     * const orderOnShop = await prisma.orderOnShop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderOnShopUpdateManyArgs>(args: SelectSubset<T, OrderOnShopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderOnShop.
     * @param {OrderOnShopUpsertArgs} args - Arguments to update or create a OrderOnShop.
     * @example
     * // Update or create a OrderOnShop
     * const orderOnShop = await prisma.orderOnShop.upsert({
     *   create: {
     *     // ... data to create a OrderOnShop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderOnShop we want to update
     *   }
     * })
     */
    upsert<T extends OrderOnShopUpsertArgs>(args: SelectSubset<T, OrderOnShopUpsertArgs<ExtArgs>>): Prisma__OrderOnShopClient<$Result.GetResult<Prisma.$OrderOnShopPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrderOnShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopCountArgs} args - Arguments to filter OrderOnShops to count.
     * @example
     * // Count the number of OrderOnShops
     * const count = await prisma.orderOnShop.count({
     *   where: {
     *     // ... the filter for the OrderOnShops we want to count
     *   }
     * })
    **/
    count<T extends OrderOnShopCountArgs>(
      args?: Subset<T, OrderOnShopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderOnShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderOnShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderOnShopAggregateArgs>(args: Subset<T, OrderOnShopAggregateArgs>): Prisma.PrismaPromise<GetOrderOnShopAggregateType<T>>

    /**
     * Group by OrderOnShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderOnShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderOnShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderOnShopGroupByArgs['orderBy'] }
        : { orderBy?: OrderOnShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderOnShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderOnShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderOnShop model
   */
  readonly fields: OrderOnShopFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderOnShop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderOnShopClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shop<T extends ShopDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShopDefaultArgs<ExtArgs>>): Prisma__ShopClient<$Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderOnShop model
   */ 
  interface OrderOnShopFieldRefs {
    readonly order_id: FieldRef<"OrderOnShop", 'Int'>
    readonly shop_id: FieldRef<"OrderOnShop", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderOnShop findUnique
   */
  export type OrderOnShopFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * Filter, which OrderOnShop to fetch.
     */
    where: OrderOnShopWhereUniqueInput
  }

  /**
   * OrderOnShop findUniqueOrThrow
   */
  export type OrderOnShopFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * Filter, which OrderOnShop to fetch.
     */
    where: OrderOnShopWhereUniqueInput
  }

  /**
   * OrderOnShop findFirst
   */
  export type OrderOnShopFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * Filter, which OrderOnShop to fetch.
     */
    where?: OrderOnShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderOnShops to fetch.
     */
    orderBy?: OrderOnShopOrderByWithRelationInput | OrderOnShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderOnShops.
     */
    cursor?: OrderOnShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderOnShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderOnShops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderOnShops.
     */
    distinct?: OrderOnShopScalarFieldEnum | OrderOnShopScalarFieldEnum[]
  }

  /**
   * OrderOnShop findFirstOrThrow
   */
  export type OrderOnShopFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * Filter, which OrderOnShop to fetch.
     */
    where?: OrderOnShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderOnShops to fetch.
     */
    orderBy?: OrderOnShopOrderByWithRelationInput | OrderOnShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderOnShops.
     */
    cursor?: OrderOnShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderOnShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderOnShops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderOnShops.
     */
    distinct?: OrderOnShopScalarFieldEnum | OrderOnShopScalarFieldEnum[]
  }

  /**
   * OrderOnShop findMany
   */
  export type OrderOnShopFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * Filter, which OrderOnShops to fetch.
     */
    where?: OrderOnShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderOnShops to fetch.
     */
    orderBy?: OrderOnShopOrderByWithRelationInput | OrderOnShopOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderOnShops.
     */
    cursor?: OrderOnShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderOnShops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderOnShops.
     */
    skip?: number
    distinct?: OrderOnShopScalarFieldEnum | OrderOnShopScalarFieldEnum[]
  }

  /**
   * OrderOnShop create
   */
  export type OrderOnShopCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderOnShop.
     */
    data: XOR<OrderOnShopCreateInput, OrderOnShopUncheckedCreateInput>
  }

  /**
   * OrderOnShop createMany
   */
  export type OrderOnShopCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderOnShops.
     */
    data: OrderOnShopCreateManyInput | OrderOnShopCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderOnShop createManyAndReturn
   */
  export type OrderOnShopCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrderOnShops.
     */
    data: OrderOnShopCreateManyInput | OrderOnShopCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderOnShop update
   */
  export type OrderOnShopUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderOnShop.
     */
    data: XOR<OrderOnShopUpdateInput, OrderOnShopUncheckedUpdateInput>
    /**
     * Choose, which OrderOnShop to update.
     */
    where: OrderOnShopWhereUniqueInput
  }

  /**
   * OrderOnShop updateMany
   */
  export type OrderOnShopUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderOnShops.
     */
    data: XOR<OrderOnShopUpdateManyMutationInput, OrderOnShopUncheckedUpdateManyInput>
    /**
     * Filter which OrderOnShops to update
     */
    where?: OrderOnShopWhereInput
  }

  /**
   * OrderOnShop upsert
   */
  export type OrderOnShopUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderOnShop to update in case it exists.
     */
    where: OrderOnShopWhereUniqueInput
    /**
     * In case the OrderOnShop found by the `where` argument doesn't exist, create a new OrderOnShop with this data.
     */
    create: XOR<OrderOnShopCreateInput, OrderOnShopUncheckedCreateInput>
    /**
     * In case the OrderOnShop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderOnShopUpdateInput, OrderOnShopUncheckedUpdateInput>
  }

  /**
   * OrderOnShop delete
   */
  export type OrderOnShopDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
    /**
     * Filter which OrderOnShop to delete.
     */
    where: OrderOnShopWhereUniqueInput
  }

  /**
   * OrderOnShop deleteMany
   */
  export type OrderOnShopDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderOnShops to delete
     */
    where?: OrderOnShopWhereInput
  }

  /**
   * OrderOnShop without action
   */
  export type OrderOnShopDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderOnShop
     */
    select?: OrderOnShopSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderOnShopInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DirectorScalarFieldEnum: {
    id: 'id',
    lastname: 'lastname',
    firstname: 'firstname',
    patronymic: 'patronymic'
  };

  export type DirectorScalarFieldEnum = (typeof DirectorScalarFieldEnum)[keyof typeof DirectorScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    number: 'number',
    director_id: 'director_id'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const FurnitureScalarFieldEnum: {
    id: 'id',
    name: 'name',
    file: 'file'
  };

  export type FurnitureScalarFieldEnum = (typeof FurnitureScalarFieldEnum)[keyof typeof FurnitureScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    furniture_id: 'furniture_id'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderOnShopScalarFieldEnum: {
    order_id: 'order_id',
    shop_id: 'shop_id'
  };

  export type OrderOnShopScalarFieldEnum = (typeof OrderOnShopScalarFieldEnum)[keyof typeof OrderOnShopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type DirectorWhereInput = {
    AND?: DirectorWhereInput | DirectorWhereInput[]
    OR?: DirectorWhereInput[]
    NOT?: DirectorWhereInput | DirectorWhereInput[]
    id?: IntFilter<"Director"> | number
    lastname?: StringFilter<"Director"> | string
    firstname?: StringFilter<"Director"> | string
    patronymic?: StringNullableFilter<"Director"> | string | null
    shops?: ShopListRelationFilter
  }

  export type DirectorOrderByWithRelationInput = {
    id?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    patronymic?: SortOrderInput | SortOrder
    shops?: ShopOrderByRelationAggregateInput
  }

  export type DirectorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DirectorWhereInput | DirectorWhereInput[]
    OR?: DirectorWhereInput[]
    NOT?: DirectorWhereInput | DirectorWhereInput[]
    lastname?: StringFilter<"Director"> | string
    firstname?: StringFilter<"Director"> | string
    patronymic?: StringNullableFilter<"Director"> | string | null
    shops?: ShopListRelationFilter
  }, "id">

  export type DirectorOrderByWithAggregationInput = {
    id?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    patronymic?: SortOrderInput | SortOrder
    _count?: DirectorCountOrderByAggregateInput
    _avg?: DirectorAvgOrderByAggregateInput
    _max?: DirectorMaxOrderByAggregateInput
    _min?: DirectorMinOrderByAggregateInput
    _sum?: DirectorSumOrderByAggregateInput
  }

  export type DirectorScalarWhereWithAggregatesInput = {
    AND?: DirectorScalarWhereWithAggregatesInput | DirectorScalarWhereWithAggregatesInput[]
    OR?: DirectorScalarWhereWithAggregatesInput[]
    NOT?: DirectorScalarWhereWithAggregatesInput | DirectorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Director"> | number
    lastname?: StringWithAggregatesFilter<"Director"> | string
    firstname?: StringWithAggregatesFilter<"Director"> | string
    patronymic?: StringNullableWithAggregatesFilter<"Director"> | string | null
  }

  export type ShopWhereInput = {
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    id?: IntFilter<"Shop"> | number
    number?: StringFilter<"Shop"> | string
    director_id?: IntFilter<"Shop"> | number
    director?: XOR<DirectorRelationFilter, DirectorWhereInput>
    orderOnShops?: OrderOnShopListRelationFilter
  }

  export type ShopOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    director_id?: SortOrder
    director?: DirectorOrderByWithRelationInput
    orderOnShops?: OrderOnShopOrderByRelationAggregateInput
  }

  export type ShopWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    number?: string
    AND?: ShopWhereInput | ShopWhereInput[]
    OR?: ShopWhereInput[]
    NOT?: ShopWhereInput | ShopWhereInput[]
    director_id?: IntFilter<"Shop"> | number
    director?: XOR<DirectorRelationFilter, DirectorWhereInput>
    orderOnShops?: OrderOnShopListRelationFilter
  }, "id" | "number">

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    director_id?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _avg?: ShopAvgOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
    _sum?: ShopSumOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    OR?: ShopScalarWhereWithAggregatesInput[]
    NOT?: ShopScalarWhereWithAggregatesInput | ShopScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Shop"> | number
    number?: StringWithAggregatesFilter<"Shop"> | string
    director_id?: IntWithAggregatesFilter<"Shop"> | number
  }

  export type FurnitureWhereInput = {
    AND?: FurnitureWhereInput | FurnitureWhereInput[]
    OR?: FurnitureWhereInput[]
    NOT?: FurnitureWhereInput | FurnitureWhereInput[]
    id?: IntFilter<"Furniture"> | number
    name?: StringFilter<"Furniture"> | string
    file?: StringFilter<"Furniture"> | string
    orders?: OrderListRelationFilter
  }

  export type FurnitureOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
  }

  export type FurnitureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FurnitureWhereInput | FurnitureWhereInput[]
    OR?: FurnitureWhereInput[]
    NOT?: FurnitureWhereInput | FurnitureWhereInput[]
    name?: StringFilter<"Furniture"> | string
    file?: StringFilter<"Furniture"> | string
    orders?: OrderListRelationFilter
  }, "id">

  export type FurnitureOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    _count?: FurnitureCountOrderByAggregateInput
    _avg?: FurnitureAvgOrderByAggregateInput
    _max?: FurnitureMaxOrderByAggregateInput
    _min?: FurnitureMinOrderByAggregateInput
    _sum?: FurnitureSumOrderByAggregateInput
  }

  export type FurnitureScalarWhereWithAggregatesInput = {
    AND?: FurnitureScalarWhereWithAggregatesInput | FurnitureScalarWhereWithAggregatesInput[]
    OR?: FurnitureScalarWhereWithAggregatesInput[]
    NOT?: FurnitureScalarWhereWithAggregatesInput | FurnitureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Furniture"> | number
    name?: StringWithAggregatesFilter<"Furniture"> | string
    file?: StringWithAggregatesFilter<"Furniture"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    furniture_id?: IntFilter<"Order"> | number
    furniture?: XOR<FurnitureRelationFilter, FurnitureWhereInput>
    orderOnShops?: OrderOnShopListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    furniture_id?: SortOrder
    furniture?: FurnitureOrderByWithRelationInput
    orderOnShops?: OrderOnShopOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    furniture_id?: IntFilter<"Order"> | number
    furniture?: XOR<FurnitureRelationFilter, FurnitureWhereInput>
    orderOnShops?: OrderOnShopListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    furniture_id?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    furniture_id?: IntWithAggregatesFilter<"Order"> | number
  }

  export type OrderOnShopWhereInput = {
    AND?: OrderOnShopWhereInput | OrderOnShopWhereInput[]
    OR?: OrderOnShopWhereInput[]
    NOT?: OrderOnShopWhereInput | OrderOnShopWhereInput[]
    order_id?: IntFilter<"OrderOnShop"> | number
    shop_id?: IntFilter<"OrderOnShop"> | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }

  export type OrderOnShopOrderByWithRelationInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
    order?: OrderOrderByWithRelationInput
    shop?: ShopOrderByWithRelationInput
  }

  export type OrderOnShopWhereUniqueInput = Prisma.AtLeast<{
    order_id_shop_id?: OrderOnShopOrder_idShop_idCompoundUniqueInput
    AND?: OrderOnShopWhereInput | OrderOnShopWhereInput[]
    OR?: OrderOnShopWhereInput[]
    NOT?: OrderOnShopWhereInput | OrderOnShopWhereInput[]
    order_id?: IntFilter<"OrderOnShop"> | number
    shop_id?: IntFilter<"OrderOnShop"> | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
  }, "order_id_shop_id">

  export type OrderOnShopOrderByWithAggregationInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
    _count?: OrderOnShopCountOrderByAggregateInput
    _avg?: OrderOnShopAvgOrderByAggregateInput
    _max?: OrderOnShopMaxOrderByAggregateInput
    _min?: OrderOnShopMinOrderByAggregateInput
    _sum?: OrderOnShopSumOrderByAggregateInput
  }

  export type OrderOnShopScalarWhereWithAggregatesInput = {
    AND?: OrderOnShopScalarWhereWithAggregatesInput | OrderOnShopScalarWhereWithAggregatesInput[]
    OR?: OrderOnShopScalarWhereWithAggregatesInput[]
    NOT?: OrderOnShopScalarWhereWithAggregatesInput | OrderOnShopScalarWhereWithAggregatesInput[]
    order_id?: IntWithAggregatesFilter<"OrderOnShop"> | number
    shop_id?: IntWithAggregatesFilter<"OrderOnShop"> | number
  }

  export type DirectorCreateInput = {
    lastname: string
    firstname: string
    patronymic?: string | null
    shops?: ShopCreateNestedManyWithoutDirectorInput
  }

  export type DirectorUncheckedCreateInput = {
    id?: number
    lastname: string
    firstname: string
    patronymic?: string | null
    shops?: ShopUncheckedCreateNestedManyWithoutDirectorInput
  }

  export type DirectorUpdateInput = {
    lastname?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    patronymic?: NullableStringFieldUpdateOperationsInput | string | null
    shops?: ShopUpdateManyWithoutDirectorNestedInput
  }

  export type DirectorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    patronymic?: NullableStringFieldUpdateOperationsInput | string | null
    shops?: ShopUncheckedUpdateManyWithoutDirectorNestedInput
  }

  export type DirectorCreateManyInput = {
    id?: number
    lastname: string
    firstname: string
    patronymic?: string | null
  }

  export type DirectorUpdateManyMutationInput = {
    lastname?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    patronymic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DirectorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    patronymic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopCreateInput = {
    number: string
    director: DirectorCreateNestedOneWithoutShopsInput
    orderOnShops?: OrderOnShopCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateInput = {
    id?: number
    number: string
    director_id: number
    orderOnShops?: OrderOnShopUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    director?: DirectorUpdateOneRequiredWithoutShopsNestedInput
    orderOnShops?: OrderOnShopUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    director_id?: IntFieldUpdateOperationsInput | number
    orderOnShops?: OrderOnShopUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopCreateManyInput = {
    id?: number
    number: string
    director_id: number
  }

  export type ShopUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    director_id?: IntFieldUpdateOperationsInput | number
  }

  export type FurnitureCreateInput = {
    name: string
    file: string
    orders?: OrderCreateNestedManyWithoutFurnitureInput
  }

  export type FurnitureUncheckedCreateInput = {
    id?: number
    name: string
    file: string
    orders?: OrderUncheckedCreateNestedManyWithoutFurnitureInput
  }

  export type FurnitureUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    orders?: OrderUpdateManyWithoutFurnitureNestedInput
  }

  export type FurnitureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutFurnitureNestedInput
  }

  export type FurnitureCreateManyInput = {
    id?: number
    name: string
    file: string
  }

  export type FurnitureUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
  }

  export type FurnitureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    furniture: FurnitureCreateNestedOneWithoutOrdersInput
    orderOnShops?: OrderOnShopCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    furniture_id: number
    orderOnShops?: OrderOnShopUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    furniture?: FurnitureUpdateOneRequiredWithoutOrdersNestedInput
    orderOnShops?: OrderOnShopUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    furniture_id?: IntFieldUpdateOperationsInput | number
    orderOnShops?: OrderOnShopUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    furniture_id: number
  }

  export type OrderUpdateManyMutationInput = {

  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    furniture_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderOnShopCreateInput = {
    order: OrderCreateNestedOneWithoutOrderOnShopsInput
    shop: ShopCreateNestedOneWithoutOrderOnShopsInput
  }

  export type OrderOnShopUncheckedCreateInput = {
    order_id: number
    shop_id: number
  }

  export type OrderOnShopUpdateInput = {
    order?: OrderUpdateOneRequiredWithoutOrderOnShopsNestedInput
    shop?: ShopUpdateOneRequiredWithoutOrderOnShopsNestedInput
  }

  export type OrderOnShopUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    shop_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderOnShopCreateManyInput = {
    order_id: number
    shop_id: number
  }

  export type OrderOnShopUpdateManyMutationInput = {

  }

  export type OrderOnShopUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    shop_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ShopListRelationFilter = {
    every?: ShopWhereInput
    some?: ShopWhereInput
    none?: ShopWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ShopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DirectorCountOrderByAggregateInput = {
    id?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    patronymic?: SortOrder
  }

  export type DirectorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DirectorMaxOrderByAggregateInput = {
    id?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    patronymic?: SortOrder
  }

  export type DirectorMinOrderByAggregateInput = {
    id?: SortOrder
    lastname?: SortOrder
    firstname?: SortOrder
    patronymic?: SortOrder
  }

  export type DirectorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DirectorRelationFilter = {
    is?: DirectorWhereInput
    isNot?: DirectorWhereInput
  }

  export type OrderOnShopListRelationFilter = {
    every?: OrderOnShopWhereInput
    some?: OrderOnShopWhereInput
    none?: OrderOnShopWhereInput
  }

  export type OrderOnShopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    director_id?: SortOrder
  }

  export type ShopAvgOrderByAggregateInput = {
    id?: SortOrder
    director_id?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    director_id?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    director_id?: SortOrder
  }

  export type ShopSumOrderByAggregateInput = {
    id?: SortOrder
    director_id?: SortOrder
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FurnitureCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
  }

  export type FurnitureAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FurnitureMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
  }

  export type FurnitureMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
  }

  export type FurnitureSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FurnitureRelationFilter = {
    is?: FurnitureWhereInput
    isNot?: FurnitureWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    furniture_id?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    furniture_id?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    furniture_id?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    furniture_id?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    furniture_id?: SortOrder
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ShopRelationFilter = {
    is?: ShopWhereInput
    isNot?: ShopWhereInput
  }

  export type OrderOnShopOrder_idShop_idCompoundUniqueInput = {
    order_id: number
    shop_id: number
  }

  export type OrderOnShopCountOrderByAggregateInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
  }

  export type OrderOnShopAvgOrderByAggregateInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
  }

  export type OrderOnShopMaxOrderByAggregateInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
  }

  export type OrderOnShopMinOrderByAggregateInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
  }

  export type OrderOnShopSumOrderByAggregateInput = {
    order_id?: SortOrder
    shop_id?: SortOrder
  }

  export type ShopCreateNestedManyWithoutDirectorInput = {
    create?: XOR<ShopCreateWithoutDirectorInput, ShopUncheckedCreateWithoutDirectorInput> | ShopCreateWithoutDirectorInput[] | ShopUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutDirectorInput | ShopCreateOrConnectWithoutDirectorInput[]
    createMany?: ShopCreateManyDirectorInputEnvelope
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
  }

  export type ShopUncheckedCreateNestedManyWithoutDirectorInput = {
    create?: XOR<ShopCreateWithoutDirectorInput, ShopUncheckedCreateWithoutDirectorInput> | ShopCreateWithoutDirectorInput[] | ShopUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutDirectorInput | ShopCreateOrConnectWithoutDirectorInput[]
    createMany?: ShopCreateManyDirectorInputEnvelope
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ShopUpdateManyWithoutDirectorNestedInput = {
    create?: XOR<ShopCreateWithoutDirectorInput, ShopUncheckedCreateWithoutDirectorInput> | ShopCreateWithoutDirectorInput[] | ShopUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutDirectorInput | ShopCreateOrConnectWithoutDirectorInput[]
    upsert?: ShopUpsertWithWhereUniqueWithoutDirectorInput | ShopUpsertWithWhereUniqueWithoutDirectorInput[]
    createMany?: ShopCreateManyDirectorInputEnvelope
    set?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    disconnect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    delete?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    update?: ShopUpdateWithWhereUniqueWithoutDirectorInput | ShopUpdateWithWhereUniqueWithoutDirectorInput[]
    updateMany?: ShopUpdateManyWithWhereWithoutDirectorInput | ShopUpdateManyWithWhereWithoutDirectorInput[]
    deleteMany?: ShopScalarWhereInput | ShopScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShopUncheckedUpdateManyWithoutDirectorNestedInput = {
    create?: XOR<ShopCreateWithoutDirectorInput, ShopUncheckedCreateWithoutDirectorInput> | ShopCreateWithoutDirectorInput[] | ShopUncheckedCreateWithoutDirectorInput[]
    connectOrCreate?: ShopCreateOrConnectWithoutDirectorInput | ShopCreateOrConnectWithoutDirectorInput[]
    upsert?: ShopUpsertWithWhereUniqueWithoutDirectorInput | ShopUpsertWithWhereUniqueWithoutDirectorInput[]
    createMany?: ShopCreateManyDirectorInputEnvelope
    set?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    disconnect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    delete?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    connect?: ShopWhereUniqueInput | ShopWhereUniqueInput[]
    update?: ShopUpdateWithWhereUniqueWithoutDirectorInput | ShopUpdateWithWhereUniqueWithoutDirectorInput[]
    updateMany?: ShopUpdateManyWithWhereWithoutDirectorInput | ShopUpdateManyWithWhereWithoutDirectorInput[]
    deleteMany?: ShopScalarWhereInput | ShopScalarWhereInput[]
  }

  export type DirectorCreateNestedOneWithoutShopsInput = {
    create?: XOR<DirectorCreateWithoutShopsInput, DirectorUncheckedCreateWithoutShopsInput>
    connectOrCreate?: DirectorCreateOrConnectWithoutShopsInput
    connect?: DirectorWhereUniqueInput
  }

  export type OrderOnShopCreateNestedManyWithoutShopInput = {
    create?: XOR<OrderOnShopCreateWithoutShopInput, OrderOnShopUncheckedCreateWithoutShopInput> | OrderOnShopCreateWithoutShopInput[] | OrderOnShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutShopInput | OrderOnShopCreateOrConnectWithoutShopInput[]
    createMany?: OrderOnShopCreateManyShopInputEnvelope
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
  }

  export type OrderOnShopUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<OrderOnShopCreateWithoutShopInput, OrderOnShopUncheckedCreateWithoutShopInput> | OrderOnShopCreateWithoutShopInput[] | OrderOnShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutShopInput | OrderOnShopCreateOrConnectWithoutShopInput[]
    createMany?: OrderOnShopCreateManyShopInputEnvelope
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
  }

  export type DirectorUpdateOneRequiredWithoutShopsNestedInput = {
    create?: XOR<DirectorCreateWithoutShopsInput, DirectorUncheckedCreateWithoutShopsInput>
    connectOrCreate?: DirectorCreateOrConnectWithoutShopsInput
    upsert?: DirectorUpsertWithoutShopsInput
    connect?: DirectorWhereUniqueInput
    update?: XOR<XOR<DirectorUpdateToOneWithWhereWithoutShopsInput, DirectorUpdateWithoutShopsInput>, DirectorUncheckedUpdateWithoutShopsInput>
  }

  export type OrderOnShopUpdateManyWithoutShopNestedInput = {
    create?: XOR<OrderOnShopCreateWithoutShopInput, OrderOnShopUncheckedCreateWithoutShopInput> | OrderOnShopCreateWithoutShopInput[] | OrderOnShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutShopInput | OrderOnShopCreateOrConnectWithoutShopInput[]
    upsert?: OrderOnShopUpsertWithWhereUniqueWithoutShopInput | OrderOnShopUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: OrderOnShopCreateManyShopInputEnvelope
    set?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    disconnect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    delete?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    update?: OrderOnShopUpdateWithWhereUniqueWithoutShopInput | OrderOnShopUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: OrderOnShopUpdateManyWithWhereWithoutShopInput | OrderOnShopUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: OrderOnShopScalarWhereInput | OrderOnShopScalarWhereInput[]
  }

  export type OrderOnShopUncheckedUpdateManyWithoutShopNestedInput = {
    create?: XOR<OrderOnShopCreateWithoutShopInput, OrderOnShopUncheckedCreateWithoutShopInput> | OrderOnShopCreateWithoutShopInput[] | OrderOnShopUncheckedCreateWithoutShopInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutShopInput | OrderOnShopCreateOrConnectWithoutShopInput[]
    upsert?: OrderOnShopUpsertWithWhereUniqueWithoutShopInput | OrderOnShopUpsertWithWhereUniqueWithoutShopInput[]
    createMany?: OrderOnShopCreateManyShopInputEnvelope
    set?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    disconnect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    delete?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    update?: OrderOnShopUpdateWithWhereUniqueWithoutShopInput | OrderOnShopUpdateWithWhereUniqueWithoutShopInput[]
    updateMany?: OrderOnShopUpdateManyWithWhereWithoutShopInput | OrderOnShopUpdateManyWithWhereWithoutShopInput[]
    deleteMany?: OrderOnShopScalarWhereInput | OrderOnShopScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutFurnitureInput = {
    create?: XOR<OrderCreateWithoutFurnitureInput, OrderUncheckedCreateWithoutFurnitureInput> | OrderCreateWithoutFurnitureInput[] | OrderUncheckedCreateWithoutFurnitureInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFurnitureInput | OrderCreateOrConnectWithoutFurnitureInput[]
    createMany?: OrderCreateManyFurnitureInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutFurnitureInput = {
    create?: XOR<OrderCreateWithoutFurnitureInput, OrderUncheckedCreateWithoutFurnitureInput> | OrderCreateWithoutFurnitureInput[] | OrderUncheckedCreateWithoutFurnitureInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFurnitureInput | OrderCreateOrConnectWithoutFurnitureInput[]
    createMany?: OrderCreateManyFurnitureInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutFurnitureNestedInput = {
    create?: XOR<OrderCreateWithoutFurnitureInput, OrderUncheckedCreateWithoutFurnitureInput> | OrderCreateWithoutFurnitureInput[] | OrderUncheckedCreateWithoutFurnitureInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFurnitureInput | OrderCreateOrConnectWithoutFurnitureInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutFurnitureInput | OrderUpsertWithWhereUniqueWithoutFurnitureInput[]
    createMany?: OrderCreateManyFurnitureInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutFurnitureInput | OrderUpdateWithWhereUniqueWithoutFurnitureInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutFurnitureInput | OrderUpdateManyWithWhereWithoutFurnitureInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutFurnitureNestedInput = {
    create?: XOR<OrderCreateWithoutFurnitureInput, OrderUncheckedCreateWithoutFurnitureInput> | OrderCreateWithoutFurnitureInput[] | OrderUncheckedCreateWithoutFurnitureInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFurnitureInput | OrderCreateOrConnectWithoutFurnitureInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutFurnitureInput | OrderUpsertWithWhereUniqueWithoutFurnitureInput[]
    createMany?: OrderCreateManyFurnitureInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutFurnitureInput | OrderUpdateWithWhereUniqueWithoutFurnitureInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutFurnitureInput | OrderUpdateManyWithWhereWithoutFurnitureInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type FurnitureCreateNestedOneWithoutOrdersInput = {
    create?: XOR<FurnitureCreateWithoutOrdersInput, FurnitureUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: FurnitureCreateOrConnectWithoutOrdersInput
    connect?: FurnitureWhereUniqueInput
  }

  export type OrderOnShopCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderOnShopCreateWithoutOrderInput, OrderOnShopUncheckedCreateWithoutOrderInput> | OrderOnShopCreateWithoutOrderInput[] | OrderOnShopUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutOrderInput | OrderOnShopCreateOrConnectWithoutOrderInput[]
    createMany?: OrderOnShopCreateManyOrderInputEnvelope
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
  }

  export type OrderOnShopUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderOnShopCreateWithoutOrderInput, OrderOnShopUncheckedCreateWithoutOrderInput> | OrderOnShopCreateWithoutOrderInput[] | OrderOnShopUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutOrderInput | OrderOnShopCreateOrConnectWithoutOrderInput[]
    createMany?: OrderOnShopCreateManyOrderInputEnvelope
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
  }

  export type FurnitureUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<FurnitureCreateWithoutOrdersInput, FurnitureUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: FurnitureCreateOrConnectWithoutOrdersInput
    upsert?: FurnitureUpsertWithoutOrdersInput
    connect?: FurnitureWhereUniqueInput
    update?: XOR<XOR<FurnitureUpdateToOneWithWhereWithoutOrdersInput, FurnitureUpdateWithoutOrdersInput>, FurnitureUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderOnShopUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderOnShopCreateWithoutOrderInput, OrderOnShopUncheckedCreateWithoutOrderInput> | OrderOnShopCreateWithoutOrderInput[] | OrderOnShopUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutOrderInput | OrderOnShopCreateOrConnectWithoutOrderInput[]
    upsert?: OrderOnShopUpsertWithWhereUniqueWithoutOrderInput | OrderOnShopUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderOnShopCreateManyOrderInputEnvelope
    set?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    disconnect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    delete?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    update?: OrderOnShopUpdateWithWhereUniqueWithoutOrderInput | OrderOnShopUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderOnShopUpdateManyWithWhereWithoutOrderInput | OrderOnShopUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderOnShopScalarWhereInput | OrderOnShopScalarWhereInput[]
  }

  export type OrderOnShopUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderOnShopCreateWithoutOrderInput, OrderOnShopUncheckedCreateWithoutOrderInput> | OrderOnShopCreateWithoutOrderInput[] | OrderOnShopUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderOnShopCreateOrConnectWithoutOrderInput | OrderOnShopCreateOrConnectWithoutOrderInput[]
    upsert?: OrderOnShopUpsertWithWhereUniqueWithoutOrderInput | OrderOnShopUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderOnShopCreateManyOrderInputEnvelope
    set?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    disconnect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    delete?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    connect?: OrderOnShopWhereUniqueInput | OrderOnShopWhereUniqueInput[]
    update?: OrderOnShopUpdateWithWhereUniqueWithoutOrderInput | OrderOnShopUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderOnShopUpdateManyWithWhereWithoutOrderInput | OrderOnShopUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderOnShopScalarWhereInput | OrderOnShopScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderOnShopsInput = {
    create?: XOR<OrderCreateWithoutOrderOnShopsInput, OrderUncheckedCreateWithoutOrderOnShopsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderOnShopsInput
    connect?: OrderWhereUniqueInput
  }

  export type ShopCreateNestedOneWithoutOrderOnShopsInput = {
    create?: XOR<ShopCreateWithoutOrderOnShopsInput, ShopUncheckedCreateWithoutOrderOnShopsInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOrderOnShopsInput
    connect?: ShopWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderOnShopsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderOnShopsInput, OrderUncheckedCreateWithoutOrderOnShopsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderOnShopsInput
    upsert?: OrderUpsertWithoutOrderOnShopsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderOnShopsInput, OrderUpdateWithoutOrderOnShopsInput>, OrderUncheckedUpdateWithoutOrderOnShopsInput>
  }

  export type ShopUpdateOneRequiredWithoutOrderOnShopsNestedInput = {
    create?: XOR<ShopCreateWithoutOrderOnShopsInput, ShopUncheckedCreateWithoutOrderOnShopsInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOrderOnShopsInput
    upsert?: ShopUpsertWithoutOrderOnShopsInput
    connect?: ShopWhereUniqueInput
    update?: XOR<XOR<ShopUpdateToOneWithWhereWithoutOrderOnShopsInput, ShopUpdateWithoutOrderOnShopsInput>, ShopUncheckedUpdateWithoutOrderOnShopsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ShopCreateWithoutDirectorInput = {
    number: string
    orderOnShops?: OrderOnShopCreateNestedManyWithoutShopInput
  }

  export type ShopUncheckedCreateWithoutDirectorInput = {
    id?: number
    number: string
    orderOnShops?: OrderOnShopUncheckedCreateNestedManyWithoutShopInput
  }

  export type ShopCreateOrConnectWithoutDirectorInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutDirectorInput, ShopUncheckedCreateWithoutDirectorInput>
  }

  export type ShopCreateManyDirectorInputEnvelope = {
    data: ShopCreateManyDirectorInput | ShopCreateManyDirectorInput[]
    skipDuplicates?: boolean
  }

  export type ShopUpsertWithWhereUniqueWithoutDirectorInput = {
    where: ShopWhereUniqueInput
    update: XOR<ShopUpdateWithoutDirectorInput, ShopUncheckedUpdateWithoutDirectorInput>
    create: XOR<ShopCreateWithoutDirectorInput, ShopUncheckedCreateWithoutDirectorInput>
  }

  export type ShopUpdateWithWhereUniqueWithoutDirectorInput = {
    where: ShopWhereUniqueInput
    data: XOR<ShopUpdateWithoutDirectorInput, ShopUncheckedUpdateWithoutDirectorInput>
  }

  export type ShopUpdateManyWithWhereWithoutDirectorInput = {
    where: ShopScalarWhereInput
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyWithoutDirectorInput>
  }

  export type ShopScalarWhereInput = {
    AND?: ShopScalarWhereInput | ShopScalarWhereInput[]
    OR?: ShopScalarWhereInput[]
    NOT?: ShopScalarWhereInput | ShopScalarWhereInput[]
    id?: IntFilter<"Shop"> | number
    number?: StringFilter<"Shop"> | string
    director_id?: IntFilter<"Shop"> | number
  }

  export type DirectorCreateWithoutShopsInput = {
    lastname: string
    firstname: string
    patronymic?: string | null
  }

  export type DirectorUncheckedCreateWithoutShopsInput = {
    id?: number
    lastname: string
    firstname: string
    patronymic?: string | null
  }

  export type DirectorCreateOrConnectWithoutShopsInput = {
    where: DirectorWhereUniqueInput
    create: XOR<DirectorCreateWithoutShopsInput, DirectorUncheckedCreateWithoutShopsInput>
  }

  export type OrderOnShopCreateWithoutShopInput = {
    order: OrderCreateNestedOneWithoutOrderOnShopsInput
  }

  export type OrderOnShopUncheckedCreateWithoutShopInput = {
    order_id: number
  }

  export type OrderOnShopCreateOrConnectWithoutShopInput = {
    where: OrderOnShopWhereUniqueInput
    create: XOR<OrderOnShopCreateWithoutShopInput, OrderOnShopUncheckedCreateWithoutShopInput>
  }

  export type OrderOnShopCreateManyShopInputEnvelope = {
    data: OrderOnShopCreateManyShopInput | OrderOnShopCreateManyShopInput[]
    skipDuplicates?: boolean
  }

  export type DirectorUpsertWithoutShopsInput = {
    update: XOR<DirectorUpdateWithoutShopsInput, DirectorUncheckedUpdateWithoutShopsInput>
    create: XOR<DirectorCreateWithoutShopsInput, DirectorUncheckedCreateWithoutShopsInput>
    where?: DirectorWhereInput
  }

  export type DirectorUpdateToOneWithWhereWithoutShopsInput = {
    where?: DirectorWhereInput
    data: XOR<DirectorUpdateWithoutShopsInput, DirectorUncheckedUpdateWithoutShopsInput>
  }

  export type DirectorUpdateWithoutShopsInput = {
    lastname?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    patronymic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DirectorUncheckedUpdateWithoutShopsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    patronymic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderOnShopUpsertWithWhereUniqueWithoutShopInput = {
    where: OrderOnShopWhereUniqueInput
    update: XOR<OrderOnShopUpdateWithoutShopInput, OrderOnShopUncheckedUpdateWithoutShopInput>
    create: XOR<OrderOnShopCreateWithoutShopInput, OrderOnShopUncheckedCreateWithoutShopInput>
  }

  export type OrderOnShopUpdateWithWhereUniqueWithoutShopInput = {
    where: OrderOnShopWhereUniqueInput
    data: XOR<OrderOnShopUpdateWithoutShopInput, OrderOnShopUncheckedUpdateWithoutShopInput>
  }

  export type OrderOnShopUpdateManyWithWhereWithoutShopInput = {
    where: OrderOnShopScalarWhereInput
    data: XOR<OrderOnShopUpdateManyMutationInput, OrderOnShopUncheckedUpdateManyWithoutShopInput>
  }

  export type OrderOnShopScalarWhereInput = {
    AND?: OrderOnShopScalarWhereInput | OrderOnShopScalarWhereInput[]
    OR?: OrderOnShopScalarWhereInput[]
    NOT?: OrderOnShopScalarWhereInput | OrderOnShopScalarWhereInput[]
    order_id?: IntFilter<"OrderOnShop"> | number
    shop_id?: IntFilter<"OrderOnShop"> | number
  }

  export type OrderCreateWithoutFurnitureInput = {
    orderOnShops?: OrderOnShopCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutFurnitureInput = {
    id?: number
    orderOnShops?: OrderOnShopUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutFurnitureInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutFurnitureInput, OrderUncheckedCreateWithoutFurnitureInput>
  }

  export type OrderCreateManyFurnitureInputEnvelope = {
    data: OrderCreateManyFurnitureInput | OrderCreateManyFurnitureInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutFurnitureInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutFurnitureInput, OrderUncheckedUpdateWithoutFurnitureInput>
    create: XOR<OrderCreateWithoutFurnitureInput, OrderUncheckedCreateWithoutFurnitureInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutFurnitureInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutFurnitureInput, OrderUncheckedUpdateWithoutFurnitureInput>
  }

  export type OrderUpdateManyWithWhereWithoutFurnitureInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutFurnitureInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    furniture_id?: IntFilter<"Order"> | number
  }

  export type FurnitureCreateWithoutOrdersInput = {
    name: string
    file: string
  }

  export type FurnitureUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    file: string
  }

  export type FurnitureCreateOrConnectWithoutOrdersInput = {
    where: FurnitureWhereUniqueInput
    create: XOR<FurnitureCreateWithoutOrdersInput, FurnitureUncheckedCreateWithoutOrdersInput>
  }

  export type OrderOnShopCreateWithoutOrderInput = {
    shop: ShopCreateNestedOneWithoutOrderOnShopsInput
  }

  export type OrderOnShopUncheckedCreateWithoutOrderInput = {
    shop_id: number
  }

  export type OrderOnShopCreateOrConnectWithoutOrderInput = {
    where: OrderOnShopWhereUniqueInput
    create: XOR<OrderOnShopCreateWithoutOrderInput, OrderOnShopUncheckedCreateWithoutOrderInput>
  }

  export type OrderOnShopCreateManyOrderInputEnvelope = {
    data: OrderOnShopCreateManyOrderInput | OrderOnShopCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type FurnitureUpsertWithoutOrdersInput = {
    update: XOR<FurnitureUpdateWithoutOrdersInput, FurnitureUncheckedUpdateWithoutOrdersInput>
    create: XOR<FurnitureCreateWithoutOrdersInput, FurnitureUncheckedCreateWithoutOrdersInput>
    where?: FurnitureWhereInput
  }

  export type FurnitureUpdateToOneWithWhereWithoutOrdersInput = {
    where?: FurnitureWhereInput
    data: XOR<FurnitureUpdateWithoutOrdersInput, FurnitureUncheckedUpdateWithoutOrdersInput>
  }

  export type FurnitureUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
  }

  export type FurnitureUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
  }

  export type OrderOnShopUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderOnShopWhereUniqueInput
    update: XOR<OrderOnShopUpdateWithoutOrderInput, OrderOnShopUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderOnShopCreateWithoutOrderInput, OrderOnShopUncheckedCreateWithoutOrderInput>
  }

  export type OrderOnShopUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderOnShopWhereUniqueInput
    data: XOR<OrderOnShopUpdateWithoutOrderInput, OrderOnShopUncheckedUpdateWithoutOrderInput>
  }

  export type OrderOnShopUpdateManyWithWhereWithoutOrderInput = {
    where: OrderOnShopScalarWhereInput
    data: XOR<OrderOnShopUpdateManyMutationInput, OrderOnShopUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutOrderOnShopsInput = {
    furniture: FurnitureCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutOrderOnShopsInput = {
    id?: number
    furniture_id: number
  }

  export type OrderCreateOrConnectWithoutOrderOnShopsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderOnShopsInput, OrderUncheckedCreateWithoutOrderOnShopsInput>
  }

  export type ShopCreateWithoutOrderOnShopsInput = {
    number: string
    director: DirectorCreateNestedOneWithoutShopsInput
  }

  export type ShopUncheckedCreateWithoutOrderOnShopsInput = {
    id?: number
    number: string
    director_id: number
  }

  export type ShopCreateOrConnectWithoutOrderOnShopsInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutOrderOnShopsInput, ShopUncheckedCreateWithoutOrderOnShopsInput>
  }

  export type OrderUpsertWithoutOrderOnShopsInput = {
    update: XOR<OrderUpdateWithoutOrderOnShopsInput, OrderUncheckedUpdateWithoutOrderOnShopsInput>
    create: XOR<OrderCreateWithoutOrderOnShopsInput, OrderUncheckedCreateWithoutOrderOnShopsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderOnShopsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderOnShopsInput, OrderUncheckedUpdateWithoutOrderOnShopsInput>
  }

  export type OrderUpdateWithoutOrderOnShopsInput = {
    furniture?: FurnitureUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderOnShopsInput = {
    id?: IntFieldUpdateOperationsInput | number
    furniture_id?: IntFieldUpdateOperationsInput | number
  }

  export type ShopUpsertWithoutOrderOnShopsInput = {
    update: XOR<ShopUpdateWithoutOrderOnShopsInput, ShopUncheckedUpdateWithoutOrderOnShopsInput>
    create: XOR<ShopCreateWithoutOrderOnShopsInput, ShopUncheckedCreateWithoutOrderOnShopsInput>
    where?: ShopWhereInput
  }

  export type ShopUpdateToOneWithWhereWithoutOrderOnShopsInput = {
    where?: ShopWhereInput
    data: XOR<ShopUpdateWithoutOrderOnShopsInput, ShopUncheckedUpdateWithoutOrderOnShopsInput>
  }

  export type ShopUpdateWithoutOrderOnShopsInput = {
    number?: StringFieldUpdateOperationsInput | string
    director?: DirectorUpdateOneRequiredWithoutShopsNestedInput
  }

  export type ShopUncheckedUpdateWithoutOrderOnShopsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    director_id?: IntFieldUpdateOperationsInput | number
  }

  export type ShopCreateManyDirectorInput = {
    id?: number
    number: string
  }

  export type ShopUpdateWithoutDirectorInput = {
    number?: StringFieldUpdateOperationsInput | string
    orderOnShops?: OrderOnShopUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateWithoutDirectorInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    orderOnShops?: OrderOnShopUncheckedUpdateManyWithoutShopNestedInput
  }

  export type ShopUncheckedUpdateManyWithoutDirectorInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
  }

  export type OrderOnShopCreateManyShopInput = {
    order_id: number
  }

  export type OrderOnShopUpdateWithoutShopInput = {
    order?: OrderUpdateOneRequiredWithoutOrderOnShopsNestedInput
  }

  export type OrderOnShopUncheckedUpdateWithoutShopInput = {
    order_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderOnShopUncheckedUpdateManyWithoutShopInput = {
    order_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateManyFurnitureInput = {
    id?: number
  }

  export type OrderUpdateWithoutFurnitureInput = {
    orderOnShops?: OrderOnShopUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutFurnitureInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderOnShops?: OrderOnShopUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutFurnitureInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderOnShopCreateManyOrderInput = {
    shop_id: number
  }

  export type OrderOnShopUpdateWithoutOrderInput = {
    shop?: ShopUpdateOneRequiredWithoutOrderOnShopsNestedInput
  }

  export type OrderOnShopUncheckedUpdateWithoutOrderInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderOnShopUncheckedUpdateManyWithoutOrderInput = {
    shop_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DirectorCountOutputTypeDefaultArgs instead
     */
    export type DirectorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DirectorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShopCountOutputTypeDefaultArgs instead
     */
    export type ShopCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FurnitureCountOutputTypeDefaultArgs instead
     */
    export type FurnitureCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FurnitureCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DirectorDefaultArgs instead
     */
    export type DirectorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DirectorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShopDefaultArgs instead
     */
    export type ShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShopDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FurnitureDefaultArgs instead
     */
    export type FurnitureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FurnitureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderOnShopDefaultArgs instead
     */
    export type OrderOnShopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderOnShopDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}